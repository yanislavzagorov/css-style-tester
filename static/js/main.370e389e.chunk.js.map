{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","userInputText","userInputColor","userInputWeight","userInputBackgroundColor","userInputFontFamily","inputTextChangedHandler","event","_this","setState","target","value","inputColorChangedHandler","inputWeightChangedHandler","inputBackgroundColorChangedHandler","inputFontFamilyChangedHandler","style","color","this","fontWeight","outputPanelStyle","fontFamily","backgroundColor","react_default","a","createElement","className","type","onChange","placeholder","id","userInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.370e389e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport CardContainer from './CardContainer/CardContainer.js'\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    userInputText: 'Example text.',\r\n    userInputColor: '',\r\n    userInputWeight: '',\r\n    userInputBackgroundColor: '',\r\n    userInputFontFamily: ''\r\n  }\r\n\r\n  inputTextChangedHandler = ( event ) => {\r\n    this.setState( { userInputText: event.target.value } );\r\n  }\r\n\r\n  inputColorChangedHandler = ( event ) => {\r\n    this.setState( { userInputColor: event.target.value } );\r\n  }\r\n\r\n  inputWeightChangedHandler = ( event ) => {\r\n    this.setState( { userInputWeight: event.target.value } );\r\n  }\r\n\r\n  inputBackgroundColorChangedHandler = ( event ) => {\r\n    this.setState( { userInputBackgroundColor: event.target.value } )\r\n  }\r\n\r\n  inputFontFamilyChangedHandler = ( event ) => {\r\n    this.setState( { userInputFontFamily: event.target.value } )\r\n  }\r\n\r\n  render() {\r\n    const style = {\r\n      color: this.state.userInputColor,\r\n      fontWeight: this.state.userInputWeight\r\n    }\r\n\r\n    const outputPanelStyle = {\r\n      fontFamily: this.state.userInputFontFamily,\r\n      backgroundColor: this.state.userInputBackgroundColor\r\n    }\r\n\r\n    return (\r\n      <div className=\"Wrapper\">\r\n        <div className=\"LeftPanel\">\r\n          <h2 className='headings'>Input</h2>\r\n          <hr/>\r\n          <p>Sample Text</p>\r\n          <input \r\n            type=\"text\"\r\n            onChange={this.inputTextChangedHandler}\r\n            value={this.state.userInputText}\r\n            placeholder='Your sample text'\r\n          />\r\n          <p>Color</p>\r\n          <input \r\n            type=\"text\"\r\n            onChange={this.inputColorChangedHandler}\r\n            value={this.state.userInputColor}\r\n            placeholder='color: '\r\n          />\r\n          <p>Weight</p>\r\n          <input \r\n            type=\"text\"\r\n            onChange={this.inputWeightChangedHandler}\r\n            value={this.state.userInputWeight}\r\n            placeholder='font-weight: '\r\n          />\r\n          <p>Background Color</p>\r\n          <input \r\n            type=\"text\"\r\n            onChange={this.inputBackgroundColorChangedHandler}\r\n            value={this.state.userInputBackgroundColor}\r\n            placeholder='background-color:'\r\n          />\r\n          <p>Font Family</p>\r\n          <input \r\n            type=\"text\"\r\n            onChange={this.inputFontFamilyChangedHandler}\r\n            value={this.state.userInputFontFamily}\r\n            placeholder='font-family:'\r\n          />\r\n\r\n          <button id=\"copyClipboardButton\">Copy code to clipboard.</button>\r\n        </div>\r\n        <div className=\"RightPanel\">\r\n          <h2 className='headings'>Output</h2>\r\n          <hr/>\r\n          <p>Styling for: {this.state.userInput}</p>\r\n          <div style={outputPanelStyle} className=\"OutputPanel\">\r\n            <h1 style={style}>H1 - {this.state.userInputText}</h1>\r\n            <h2 style={style}>H2 - {this.state.userInputText}</h2>\r\n            <h3 style={style}>H3 - {this.state.userInputText}</h3>\r\n            <h4 style={style}>H4 - {this.state.userInputText}</h4>\r\n            <h5 style={style}>H5 - {this.state.userInputText}</h5>\r\n            <h6 style={style}>H6 - {this.state.userInputText}</h6>\r\n            <br/>\r\n            <p style={style}>Paragraph - {this.state.userInputText}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}