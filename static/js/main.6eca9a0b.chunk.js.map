{"version":3,"sources":["ClipboardHandler/ClipboardHandler.js","App.js","serviceWorker.js","index.js"],"names":["ClipboardHandler","_useState","useState","_useState2","Object","slicedToArray","useRef","react_default","a","createElement","id","App","state","userInputText","userInputColor","userInputWeight","userInputBackgroundColor","userInputFontFamily","inputTextChangedHandler","event","_this","setState","target","value","inputColorChangedHandler","inputWeightChangedHandler","inputBackgroundColorChangedHandler","inputFontFamilyChangedHandler","style","color","this","fontWeight","outputPanelStyle","fontFamily","backgroundColor","className","type","onChange","placeholder","userInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sUAEe,SAASA,IAAmB,IAAAC,EACHC,mBAAS,IADNC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAAE,EAAA,GAAAA,EAAA,GAErBG,iBAAO,MAW3B,OACEC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIC,GAAG,uBADP,gCC8FOC,6MAxGbC,MAAQ,CACNC,cAAe,gBACfC,eAAgB,GAChBC,gBAAiB,GACjBC,yBAA0B,GAC1BC,oBAAqB,MAGvBC,wBAA0B,SAAEC,GAC1BC,EAAKC,SAAU,CAAER,cAAeM,EAAMG,OAAOC,WAG/CC,yBAA2B,SAAEL,GAC3BC,EAAKC,SAAU,CAAEP,eAAgBK,EAAMG,OAAOC,WAGhDE,0BAA4B,SAAEN,GAC5BC,EAAKC,SAAU,CAAEN,gBAAiBI,EAAMG,OAAOC,WAGjDG,mCAAqC,SAAEP,GACrCC,EAAKC,SAAU,CAAEL,yBAA0BG,EAAMG,OAAOC,WAG1DI,8BAAgC,SAAER,GAChCC,EAAKC,SAAU,CAAEJ,oBAAqBE,EAAMG,OAAOC,iFAInD,IAAMK,EAAQ,CACZC,MAAOC,KAAKlB,MAAME,eAClBiB,WAAYD,KAAKlB,MAAMG,iBAGnBiB,EAAmB,CACvBC,WAAYH,KAAKlB,MAAMK,oBACvBiB,gBAAiBJ,KAAKlB,MAAMI,0BAG9B,OACET,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,WACb5B,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,aACb5B,EAAAC,EAAAC,cAAA,MAAI0B,UAAU,YAAd,SACA5B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,SACE2B,KAAK,OACLC,SAAUP,KAAKZ,wBACfK,MAAOO,KAAKlB,MAAMC,cAClByB,YAAY,qBAEd/B,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,SACE2B,KAAK,OACLC,SAAUP,KAAKN,yBACfD,MAAOO,KAAKlB,MAAME,eAClBwB,YAAY,YAEd/B,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,SACE2B,KAAK,OACLC,SAAUP,KAAKL,0BACfF,MAAOO,KAAKlB,MAAMG,gBAClBuB,YAAY,kBAEd/B,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,SACE2B,KAAK,OACLC,SAAUP,KAAKJ,mCACfH,MAAOO,KAAKlB,MAAMI,yBAClBsB,YAAY,sBAEd/B,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,SACE2B,KAAK,OACLC,SAAUP,KAAKH,8BACfJ,MAAOO,KAAKlB,MAAMK,oBAClBqB,YAAY,iBAEd/B,EAAAC,EAAAC,cAAA,UACEC,GAAG,uBADL,2BAGAH,EAAAC,EAAAC,cAACT,EAAD,OAEFO,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,cACb5B,EAAAC,EAAAC,cAAA,MAAI0B,UAAU,YAAd,UACA5B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,yBAAiBqB,KAAKlB,MAAM2B,WAC5BhC,EAAAC,EAAAC,cAAA,OAAKmB,MAAOI,EAAkBG,UAAU,eACtC5B,EAAAC,EAAAC,cAAA,MAAImB,MAAOA,GAAX,QAAwBE,KAAKlB,MAAMC,eACnCN,EAAAC,EAAAC,cAAA,MAAImB,MAAOA,GAAX,QAAwBE,KAAKlB,MAAMC,eACnCN,EAAAC,EAAAC,cAAA,MAAImB,MAAOA,GAAX,QAAwBE,KAAKlB,MAAMC,eACnCN,EAAAC,EAAAC,cAAA,MAAImB,MAAOA,GAAX,QAAwBE,KAAKlB,MAAMC,eACnCN,EAAAC,EAAAC,cAAA,MAAImB,MAAOA,GAAX,QAAwBE,KAAKlB,MAAMC,eACnCN,EAAAC,EAAAC,cAAA,MAAImB,MAAOA,GAAX,QAAwBE,KAAKlB,MAAMC,eACnCN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGmB,MAAOA,GAAV,eAA8BE,KAAKlB,MAAMC,yBAjGnC2B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6eca9a0b.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\r\n\r\nexport default function ClipboardHandler() {\r\n  const [copySuccess, setCopySuccess] = useState('');\r\n  const textAreaRef = useRef(null);\r\n\r\n  function copyToClipboard(e) {\r\n    textAreaRef.current.select();\r\n    document.execCommand('copy');\r\n    // This is just personal preference.\r\n    // I prefer to not show the the whole text area selected.\r\n    e.target.focus();\r\n    setCopySuccess('Copied!');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n        <button \r\n            id=\"copyClipboardButton\"\r\n          >Copy code to clipboard.</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n/*\r\n\r\n<div>\r\n      {\r\nLogical shortcut for only displaying the \r\nbutton if the copy command exists\r\n          document.queryCommandSupported('copy') &&\r\n          <div>\r\n            <button onClick={copyToClipboard}>Copy</button> \r\n            {copySuccess}\r\n          </div>\r\n        }\r\n        <form>\r\n          <textarea\r\n            ref={textAreaRef}\r\n            value='This is the copied value text inside of textarea inside of form'\r\n          />\r\n        </form>\r\n      </div>\r\n  \r\n      \r\n\r\n*/","import React, { Component } from 'react';\nimport './App.css';\nimport CardContainer from './CardContainer/CardContainer.js'\nimport useClipboard from \"react-use-clipboard\";\nimport ClipboardHandler from './ClipboardHandler/ClipboardHandler.js'\n\nclass App extends Component {\n  state = {\n    userInputText: 'Example text.',\n    userInputColor: '',\n    userInputWeight: '',\n    userInputBackgroundColor: '',\n    userInputFontFamily: ''\n  }\n\n  inputTextChangedHandler = ( event ) => {\n    this.setState( { userInputText: event.target.value } );\n  }\n\n  inputColorChangedHandler = ( event ) => {\n    this.setState( { userInputColor: event.target.value } );\n  }\n\n  inputWeightChangedHandler = ( event ) => {\n    this.setState( { userInputWeight: event.target.value } );\n  }\n\n  inputBackgroundColorChangedHandler = ( event ) => {\n    this.setState( { userInputBackgroundColor: event.target.value } )\n  }\n\n  inputFontFamilyChangedHandler = ( event ) => {\n    this.setState( { userInputFontFamily: event.target.value } )\n  }\n\n  render() {\n    const style = {\n      color: this.state.userInputColor,\n      fontWeight: this.state.userInputWeight\n    }\n\n    const outputPanelStyle = {\n      fontFamily: this.state.userInputFontFamily,\n      backgroundColor: this.state.userInputBackgroundColor\n    }\n\n    return (\n      <div className=\"Wrapper\">\n        <div className=\"LeftPanel\">\n          <h2 className='headings'>Input</h2>\n          <hr/>\n          <p>Sample Text</p>\n          <input \n            type=\"text\"\n            onChange={this.inputTextChangedHandler}\n            value={this.state.userInputText}\n            placeholder='Your sample text'\n          />\n          <p>Color</p>\n          <input \n            type=\"text\"\n            onChange={this.inputColorChangedHandler}\n            value={this.state.userInputColor}\n            placeholder='color: '\n          />\n          <p>Weight</p>\n          <input \n            type=\"text\"\n            onChange={this.inputWeightChangedHandler}\n            value={this.state.userInputWeight}\n            placeholder='font-weight: '\n          />\n          <p>Background Color</p>\n          <input \n            type=\"text\"\n            onChange={this.inputBackgroundColorChangedHandler}\n            value={this.state.userInputBackgroundColor}\n            placeholder='background-color:'\n          />\n          <p>Font Family</p>\n          <input \n            type=\"text\"\n            onChange={this.inputFontFamilyChangedHandler}\n            value={this.state.userInputFontFamily}\n            placeholder='font-family:'\n          />\n          <button \n            id=\"copyClipboardButton\"\n          >Copy code to clipboard.</button>\n          <ClipboardHandler />\n        </div>\n        <div className=\"RightPanel\">\n          <h2 className='headings'>Output</h2>\n          <hr/>\n          <p>Styling for: {this.state.userInput}</p>\n          <div style={outputPanelStyle} className=\"OutputPanel\">\n            <h1 style={style}>H1 - {this.state.userInputText}</h1>\n            <h2 style={style}>H2 - {this.state.userInputText}</h2>\n            <h3 style={style}>H3 - {this.state.userInputText}</h3>\n            <h4 style={style}>H4 - {this.state.userInputText}</h4>\n            <h5 style={style}>H5 - {this.state.userInputText}</h5>\n            <h6 style={style}>H6 - {this.state.userInputText}</h6>\n            <br/>\n            <p style={style}>Paragraph - {this.state.userInputText}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}